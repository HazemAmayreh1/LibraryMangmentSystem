// <auto-generated />
using System;
using Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20231216144515_CreatenewsDB")]
    partial class CreatenewsDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Account", b =>
                {
                    b.Property<int>("Accid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Accid"));

                    b.Property<double?>("fine_amount")
                        .HasColumnType("float");

                    b.Property<int>("no_borrowed_books")
                        .HasColumnType("int");

                    b.Property<int>("no_late_books")
                        .HasColumnType("int");

                    b.Property<int>("no_lost_books")
                        .HasColumnType("int");

                    b.Property<int>("no_returned_books")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("Accid");

                    b.HasIndex("userid")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Library.Book", b =>
                {
                    b.Property<int>("id_book")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_book"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datatimeborrowd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("datatimereturnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("librariansID")
                        .HasColumnType("int");

                    b.HasKey("id_book");

                    b.HasIndex("UserId");

                    b.HasIndex("librariansID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Librarian", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("Library.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Library.Account", b =>
                {
                    b.HasOne("Library.User", "User")
                        .WithOne("UserAccount")
                        .HasForeignKey("Library.Account", "userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Book", b =>
                {
                    b.HasOne("Library.User", "user")
                        .WithMany("Books")
                        .HasForeignKey("UserId");

                    b.HasOne("Library.Librarian", "Librarian")
                        .WithMany("books")
                        .HasForeignKey("librariansID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Librarian");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Library.Librarian", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Library.User", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("UserAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
